name: PortAudio.NET
on:
  push:
    # This prevents tag pushes from triggering this workflow
    branches: ['*']
  pull_request:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: "Version"
        default: ""
      will_publish_packages:
        description: "Publish packages?"
        default: "false"
env:
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_GENERATE_ASPNET_CERTIFICATE: false
  ContinuousIntegrationBuild: true
jobs:
  # =====================================================================================================================================================================
  # Build and package
  # =====================================================================================================================================================================
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Windows x64
            os: windows-latest
            rid: win-x64
            generate-command: ./generate.cmd
          - name: Linux x64
            os: ubuntu-22.04
            rid: linux-x64
            generate-command: ./generate.sh
    name: ${{matrix.name}}
    runs-on: ${{matrix.os}}
    steps:
      # ----------------------------------------------------------------------- Checkout
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # ----------------------------------------------------------------------- Setup tools
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.x

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # Workaround for https://github.com/MochiLibraries/Biohazrd/issues/248
      - name: Install libtinfo5
        if: matrix.rid == 'linux-x64'
        run: |
          sudo apt-get update
          sudo apt-get install libtinfo5 -y

      # ----------------------------------------------------------------------- Configure build
      - name: Configure build
        run: python .github/workflows/configure-build.py
        env:
          github_event_name: ${{github.event_name}}
          github_ref: ${{github.ref}}
          github_run_number: ${{github.run_number}}
          release_is_prerelease: ${{github.event.release.prerelease}}
          release_version: ${{github.event.release.tag_name}}
          workflow_dispatch_version: ${{github.event.inputs.version}}
          workflow_dispatch_will_publish_packages: ${{github.event.inputs.will_publish_packages}}

      # ----------------------------------------------------------------------- Generate PortAudioNet
      - name: Restore PortAudioNet.Generator
        run: dotnet restore PortAudioNet.Generator

      - name: Build PortAudioNet.Generator
        run: dotnet build PortAudioNet.Generator --configuration Release

      - name: Generate PortAudioNet
        id: generate
        run: ${{matrix.generate-command}}

      # Currently the generated output for Windows is comitted to the repository, so we don't expect changes
      - name: Ensure the generated output did not change on Windows
        if: matrix.rid == 'win-x64'
        run: git diff --exit-code

      # ----------------------------------------------------------------------- Build PortAudioNet
      - name: Restore PortAudioNet
        run: dotnet restore PortAudioNet

      - name: Build PortAudioNet
        run: dotnet build PortAudioNet --no-restore --configuration Release

      # ----------------------------------------------------------------------- Pack PortAudioNet
      - name: Pack PortAudioNet
        id: pack
        run: dotnet pack PortAudioNet --no-build --configuration Release

      # ----------------------------------------------------------------------- Pack PortAudioNet.Native variants
      - name: Restore PortAudioNet
        run: dotnet restore PortAudioNet.Native --runtime ${{matrix.rid}}

      - name: Pack PortAudioNet.Native.${{matrix.rid}}-debug
        run: dotnet pack PortAudioNet.Native --no-build --configuration Debug /p:RuntimeIdentifier=${{matrix.rid}}
      - name: Pack PortAudioNet.Native.${{matrix.rid}}
        run: dotnet pack PortAudioNet.Native --no-build --configuration Release /p:RuntimeIdentifier=${{matrix.rid}}

      # ----------------------------------------------------------------------- Run device listing sample as a smoke test
      # We do this last so it can't indirectly affect the build process of any packages
      - name: Smoke test modern .NET (Debug)
        if: ${{matrix.rid != 'linux-x64'}}
        run: dotnet run --project Samples/ListDevices --framework net8.0 --configuration Debug
      - name: Smoke test modern .NET (Release)
        if: ${{matrix.rid != 'linux-x64'}}
        run: dotnet run --project Samples/ListDevices --framework net8.0 --configuration Release
      - name: Smoke test .NET Framework (Debug)
        if: matrix.rid == 'win-x64'
        run: dotnet run --project Samples/ListDevices --framework net472 --configuration Debug
      - name: Smoke test .NET Framework (Release)
        if: matrix.rid == 'win-x64'
        run: dotnet run --project Samples/ListDevices --framework net472 --configuration Release

      # ----------------------------------------------------------------------- Ensure everything else builds
      # This mainly exists to ensure all samples build
      - name: Ensure everything else builds (Debug)
        if: ${{matrix.rid != 'linux-x64'}}
        run: dotnet build --configuration Debug
      - name: Ensure everything else builds (Release)
        if: ${{matrix.rid != 'linux-x64'}}
        run: dotnet build --configuration Release

      # ----------------------------------------------------------------------- Upload artifacts
      # All of these steps ignore failure so that we get what artifacts are available when things are broken
      - name: Collect NuGet packages
        if: steps.pack.outcome == 'success' && always()
        uses: actions/upload-artifact@v4
        with:
          name: Packages-${{matrix.rid}}
          if-no-files-found: error
          path: artifacts/package/**

      - name: Collect generated output
        if: steps.generate.outcome == 'success' && always()
        uses: actions/upload-artifact@v4
        with:
          name: Generated-${{matrix.rid}}
          if-no-files-found: error
          path: PortAudioNet/#Generated/**
